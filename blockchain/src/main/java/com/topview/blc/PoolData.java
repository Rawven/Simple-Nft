package com.topview.blc;

import com.topview.entity.struct.DataStruct.Activity;
import com.topview.entity.struct.DataStruct.Dc;
import com.topview.entity.struct.DataStruct.Pool;
import lombok.Getter;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.*;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class PoolData extends Contract {
    public static final String[] BINARY_ARRAY = {
        "", "60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80600760008481526020019081526020016000206000820151816000019080519060200190610fd792919061121f565b506020820151816001019080519060200190610ff492919061121f565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701559050505050565b806004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060098190555050565b8060068190555050565b80600a6000848152602001908152602001600020600082015181600001908051906020019061110f92919061121f565b50602082015181600101908051906020019061112c92919061129f565b50604082015181600201559050505050565b6000600954905090565b8060036000848152602001908152602001600020819055505050565b6000600154905090565b8060018190555050565b60405180606001604052806060815260200160608152602001600081525090565b604051806101000160405280606081526020016060815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060800160405280600080191681526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061126057805160ff191683800117855561128e565b8280016001018555821561128e579182015b8281111561128d578251825591602001919060010190611272565b5b50905061129b919061131f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112e057805160ff191683800117855561130e565b8280016001018555821561130e579182015b8281111561130d5782518255916020019190600101906112f2565b5b50905061131b919061131f565b5090565b61134191905b8082111561133d576000816000905550600101611325565b5090565b90565b60008135905061135381611fcb565b92915050565b60008135905061136881611fe2565b92915050565b60008135905061137d81611ff9565b92915050565b600082601f83011261139457600080fd5b81356113a76113a282611e56565b611e29565b915080825260208301602083018583830111156113c357600080fd5b6113ce838284611f78565b50505092915050565b600082601f8301126113e857600080fd5b81356113fb6113f682611e82565b611e29565b9150808252602083016020830185838301111561141757600080fd5b611422838284611f78565b50505092915050565b60006060828403121561143d57600080fd5b6114476060611e29565b9050600082013567ffffffffffffffff81111561146357600080fd5b61146f848285016113d7565b600083015250602082013567ffffffffffffffff81111561148f57600080fd5b61149b84828501611383565b60208301525060406114af84828501611625565b60408301525092915050565b6000608082840312156114cd57600080fd5b6114d76080611e29565b905060006114e78482850161136e565b60008301525060206114fb84828501611625565b602083015250604061150f84828501611625565b604083015250606061152384828501611625565b60608301525092915050565b6000610100828403121561154257600080fd5b61154d610100611e29565b9050600082013567ffffffffffffffff81111561156957600080fd5b611575848285016113d7565b600083015250602082013567ffffffffffffffff81111561159557600080fd5b6115a1848285016113d7565b60208301525060406115b584828501611625565b60408301525060606115c984828501611625565b60608301525060806115dd84828501611625565b60808301525060a06115f184828501611625565b60a08301525060c061160584828501611344565b60c08301525060e061161984828501611625565b60e08301525092915050565b60008135905061163481612010565b92915050565b6000806040838503121561164d57600080fd5b600061165b85828601611344565b925050602061166c85828601611625565b9150509250929050565b60008060006060848603121561168b57600080fd5b600061169986828701611344565b93505060206116aa86828701611625565b92505060406116bb86828701611625565b9150509250925092565b6000602082840312156116d757600080fd5b60006116e58482850161136e565b91505092915050565b6000806040838503121561170157600080fd5b600061170f8582860161136e565b925050602061172085828601611625565b9150509250929050565b60006020828403121561173c57600080fd5b600082013567ffffffffffffffff81111561175657600080fd5b611762848285016113d7565b91505092915050565b6000806040838503121561177e57600080fd5b600083013567ffffffffffffffff81111561179857600080fd5b6117a4858286016113d7565b92505060206117b585828601611359565b9150509250929050565b6000602082840312156117d157600080fd5b60006117df84828501611625565b91505092915050565b600080604083850312156117fb57600080fd5b600061180985828601611625565b925050602061181a85828601611344565b9150509250929050565b6000806040838503121561183757600080fd5b600061184585828601611625565b925050602083013567ffffffffffffffff81111561186257600080fd5b61186e8582860161142b565b9150509250929050565b60008060a0838503121561188b57600080fd5b600061189985828601611625565b92505060206118aa858286016114bb565b9150509250929050565b600080604083850312156118c757600080fd5b60006118d585828601611625565b925050602083013567ffffffffffffffff8111156118f257600080fd5b6118fe8582860161152f565b9150509250929050565b61191181611f02565b82525050565b61192081611f02565b82525050565b61192f81611f14565b82525050565b61193e81611f20565b82525050565b600061194f82611eae565b6119598185611ec4565b9350611969818560208601611f87565b61197281611fba565b840191505092915050565b61198681611f54565b82525050565b600061199782611eb9565b6119a18185611ed5565b93506119b1818560208601611f87565b6119ba81611fba565b840191505092915050565b60006119d082611eb9565b6119da8185611ef7565b93506119ea818560208601611f87565b80840191505092915050565b6000611a03602583611ee6565b91507fe8afa5e8978fe5938168617368e5afb9e5ba94e79a84e8978fe59381e4b88de560008301527fad98e59ca80000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a69601d83611ee6565b91507fe68980e69fa5e8afa2e79a84e8978fe59381e6b1a06964e8b68ae7958c0000006000830152602082019050919050565b6000611aa9601a83611ee6565b91507fe68980e69fa5e8afa2e79a84e6b4bbe58aa86964e8b68ae7958c0000000000006000830152602082019050919050565b6000611ae9601a83611ee6565b91507fe68980e69fa5e8afa2e79a84e8978fe593816964e8b68ae7958c0000000000006000830152602082019050919050565b60006060830160008301518482036000860152611b39828261198c565b91505060208301518482036020860152611b538282611944565b9150506040830151611b686040860182611c7f565b508091505092915050565b608082016000820151611b896000850182611935565b506020820151611b9c6020850182611c7f565b506040820151611baf6040850182611c7f565b506060820151611bc26060850182611c7f565b50505050565b6000610100830160008301518482036000860152611be6828261198c565b91505060208301518482036020860152611c00828261198c565b9150506040830151611c156040860182611c7f565b506060830151611c286060860182611c7f565b506080830151611c3b6080860182611c7f565b5060a0830151611c4e60a0860182611c7f565b5060c0830151611c6160c0860182611908565b5060e0830151611c7460e0860182611c7f565b508091505092915050565b611c8881611f4a565b82525050565b611c9781611f4a565b82525050565b6000611ca982846119c5565b915081905092915050565b6000602082019050611cc96000830184611917565b92915050565b6000602082019050611ce46000830184611926565b92915050565b6000602082019050611cff600083018461197d565b92915050565b60006020820190508181036000830152611d1e816119f6565b9050919050565b60006020820190508181036000830152611d3e81611a5c565b9050919050565b60006020820190508181036000830152611d5e81611a9c565b9050919050565b60006020820190508181036000830152611d7e81611adc565b9050919050565b60006040820190508181036000830152611d9f8185611b1c565b90508181036020830152611db38184611bc8565b90509392505050565b600060a082019050611dd16000830185611b73565b8181036080830152611de38184611bc8565b90509392505050565b60006020820190508181036000830152611e068184611bc8565b905092915050565b6000602082019050611e236000830184611c8e565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611e4c57600080fd5b8060405250919050565b600067ffffffffffffffff821115611e6d57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611e9957600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611f0d82611f2a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f5f82611f66565b90509190", "50565b6000611f7182611f2a565b9050919050565b82818337600083830152505050565b60005b83811015611fa5578082015181840152602081019050611f8a565b83811115611fb4576000848401525b50505050565b6000601f19601f8301169050919050565b611fd481611f02565b8114611fdf57600080fd5b50565b611feb81611f14565b8114611ff657600080fd5b50565b61200281611f20565b811461200d57600080fd5b50565b61201981611f4a565b811461202457600080fd5b5056fea264697066735822122091d4c2508f93be73d39bf203fa4ebdee02075889242fb75cb8dee745d4033dac64736f6c634300060a0033608060405234801561001057600080fd5b50610ac8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308eef5c2146100465780639507d39a14610076578063ec22e7c3146100a6575b600080fd5b610060600480360381019061005b919061071b565b6100c2565b60405161006d919061090c565b60405180910390f35b610090600480360381019061008b919061071b565b6102ac565b60405161009d91906108ea565b60405180910390f35b6100c060048036038101906100bb9190610744565b610475565b005b60006060600080848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561028257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b505050505081525050815260200190600101906100f8565b5050505090508060018251038151811061029857fe5b602002602001015160400151915050919050565b6060600080838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561046a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b505050505081525050815260200190600101906102e0565b505050509050919050565b60008083815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301908051906020019061056592919061056c565b5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105ad57805160ff19168380011785556105db565b828001600101855582156105db579182015b828111156105da5782518255916020019190600101906105bf565b5b5090506105e891906105ec565b5090565b61060e91905b8082111561060a5760008160009055506001016105f2565b5090565b90565b60008135905061062081610a64565b92915050565b600082601f83011261063757600080fd5b813561064a61064582610954565b610927565b9150808252602083016020830185838301111561066657600080fd5b610671838284610a11565b50505092915050565b60006080828403121561068c57600080fd5b6106966080610927565b905060006106a684828501610611565b60008301525060206106ba84828501610611565b60208301525060406106ce84828501610706565b604083015250606082013567ffffffffffffffff8111156106ee57600080fd5b6106fa84828501610626565b60608301525092915050565b60008135905061071581610a7b565b92915050565b60006020828403121561072d57600080fd5b600061073b84828501610706565b91505092915050565b6000806040838503121561075757600080fd5b600061076585828601610706565b925050602083013567ffffffffffffffff81111561078257600080fd5b61078e8582860161067a565b9150509250929050565b60006107a48383610869565b905092915050565b6107b5816109d5565b82525050565b60006107c682610990565b6107d081856109b3565b9350836020820285016107e285610980565b8060005b8581101561081e57848403895281516107ff8582610798565b945061080a836109a6565b925060208a019950506001810190506107e6565b50829750879550505050505092915050565b600061083b8261099b565b61084581856109c4565b9350610855818560208601610a20565b61085e81610a53565b840191505092915050565b600060808301600083015161088160008601826107ac565b50602083015161089460208601826107ac565b5060408301516108a760408601826108cc565b50606083015184820360608601526108bf8282610830565b9150508091505092915050565b6108d581610a07565b82525050565b6108e481610a07565b82525050565b6000602082019050818103600083015261090481846107bb565b905092915050565b600060208201905061092160008301846108db565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561094a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561096b57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006109e0826109e7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610a3e578082015181840152602081019050610a23565b83811115610a4d576000848401525b50505050565b6000601f19601f8301169050919050565b610a6d816109d5565b8114610a7857600080fd5b50565b610a8481610a07565b8114610a8f57600080fd5b5056fea26469706673582212200454176bacc7cc3f330081559929c63fc00e7d1857d52227c92082669c1a559e64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getActivityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getAmountOwnedInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"getCidStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDcAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"getDcOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_uniqueHash\",\"type\":\"bytes32\"}],\"name\":\"getHashToDcId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activityId\",\"type\":\"uint256\"}],\"name\":\"getIdToActivity\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Activity\",\"name\":\"activity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"getIdToDc\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInPool\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Dc\",\"name\":\"dc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getIdToPool\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraceContract\",\"outputs\":[{\"internalType\":\"contract Trace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activityAmount\",\"type\":\"uint256\"}],\"name\":\"setActivityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmountOwnedInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setCidStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcAmount\",\"type\":\"uint256\"}],\"name\":\"setDcAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setDcOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_uniqueHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"setHashToDcId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activityId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Activity\",\"name\":\"_activity\",\"type\":\"tuple\"}],\"name\":\"setIdToActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInPool\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Dc\",\"name\":\"_dc\",\"type\":\"tuple\"}],\"name\":\"setIdToDc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStructs.Pool\",\"name\":\"_pool\",\"type\":\"tuple\"}],\"name\":\"setIdToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"}],\"name\":\"setPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    @Getter
    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETACTIVITYAMOUNT = "getActivityAmount";

    public static final String FUNC_GETAMOUNTOWNEDINPOOL = "getAmountOwnedInPool";

    public static final String FUNC_GETCIDSTATUS = "getCidStatus";

    public static final String FUNC_GETDCAMOUNT = "getDcAmount";

    public static final String FUNC_GETDCOWNER = "getDcOwner";

    public static final String FUNC_GETHASHTODCID = "getHashToDcId";

    public static final String FUNC_GETIDTOACTIVITY = "getIdToActivity";

    public static final String FUNC_GETIDTODC = "getIdToDc";

    public static final String FUNC_GETIDTOPOOL = "getIdToPool";

    public static final String FUNC_GETPOOLAMOUNT = "getPoolAmount";

    public static final String FUNC_GETTRACECONTRACT = "getTraceContract";

    public static final String FUNC_SETACTIVITYAMOUNT = "setActivityAmount";

    public static final String FUNC_SETAMOUNTOWNEDINPOOL = "setAmountOwnedInPool";

    public static final String FUNC_SETCIDSTATUS = "setCidStatus";

    public static final String FUNC_SETDCAMOUNT = "setDcAmount";

    public static final String FUNC_SETDCOWNER = "setDcOwner";

    public static final String FUNC_SETHASHTODCID = "setHashToDcId";

    public static final String FUNC_SETIDTOACTIVITY = "setIdToActivity";

    public static final String FUNC_SETIDTODC = "setIdToDc";

    public static final String FUNC_SETIDTOPOOL = "setIdToPool";

    public static final String FUNC_SETPOOLAMOUNT = "setPoolAmount";

    protected PoolData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static PoolData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PoolData(contractAddress, client, credential);
    }

    public static PoolData deploy(Client client, CryptoKeyPair credential) throws
        ContractException {
        return deploy(PoolData.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public BigInteger getActivityAmount() throws ContractException {
        final Function function = new Function(FUNC_GETACTIVITYAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void getActivityAmount(CallCallback callback) {
        final Function function = new Function(FUNC_GETACTIVITYAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public BigInteger getAmountOwnedInPool(String _user, BigInteger _poolId) throws
        ContractException {
        final Function function = new Function(FUNC_GETAMOUNTOWNEDINPOOL,
                Arrays.asList(new Address(_user),
                new Uint256(_poolId)),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void getAmountOwnedInPool(String _user, BigInteger _poolId, CallCallback callback) {
        final Function function = new Function(FUNC_GETAMOUNTOWNEDINPOOL,
                Arrays.asList(new Address(_user),
                new Uint256(_poolId)),
                List.of(new TypeReference<Uint256>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public Boolean getCidStatus(String _cid) throws ContractException {
        final Function function = new Function(FUNC_GETCIDSTATUS,
                List.of(new Utf8String(_cid)),
                List.of(new TypeReference<Bool>() {
                }));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public void getCidStatus(String _cid, CallCallback callback) {
        final Function function = new Function(FUNC_GETCIDSTATUS,
                List.of(new Utf8String(_cid)),
                List.of(new TypeReference<Bool>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public BigInteger getDcAmount() throws ContractException {
        final Function function = new Function(FUNC_GETDCAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void getDcAmount(CallCallback callback) {
        final Function function = new Function(FUNC_GETDCAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public String getDcOwner(BigInteger _dcId) throws ContractException {
        final Function function = new Function(FUNC_GETDCOWNER,
                List.of(new Uint256(_dcId)),
                List.of(new TypeReference<Address>() {
                }));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public void getDcOwner(BigInteger _dcId, CallCallback callback) {
        final Function function = new Function(FUNC_GETDCOWNER,
                List.of(new Uint256(_dcId)),
                List.of(new TypeReference<Address>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public BigInteger getHashToDcId(byte[] _uniqueHash) throws ContractException {
        final Function function = new Function(FUNC_GETHASHTODCID,
                List.of(new Bytes32(_uniqueHash)),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void getHashToDcId(byte[] _uniqueHash, CallCallback callback) {
        final Function function = new Function(FUNC_GETHASHTODCID,
                List.of(new Bytes32(_uniqueHash)),
                List.of(new TypeReference<Uint256>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public Tuple2<Activity, Pool> getIdToActivity(BigInteger _activityId) throws ContractException {
        final Function function = new Function(FUNC_GETIDTOACTIVITY,
                List.of(new Uint256(_activityId)),
                Arrays.asList(new TypeReference<Activity>() {
            }, new TypeReference<Pool>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
                (Activity) results.get(0).getValue(),
                (Pool) results.get(1).getValue());
    }

    public void getIdToActivity(BigInteger _activityId, CallCallback callback) {
        final Function function = new Function(FUNC_GETIDTOACTIVITY,
                List.of(new Uint256(_activityId)),
                Arrays.asList(new TypeReference<Activity>() {
            }, new TypeReference<Pool>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public Tuple2<Dc, Pool> getIdToDc(BigInteger _dcId) throws ContractException {
        final Function function = new Function(FUNC_GETIDTODC,
                List.of(new Uint256(_dcId)),
                Arrays.asList(new TypeReference<Dc>() {
            }, new TypeReference<Pool>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
                (Dc) results.get(0).getValue(),
                (Pool) results.get(1).getValue());
    }

    public void getIdToDc(BigInteger _dcId, CallCallback callback) {
        final Function function = new Function(FUNC_GETIDTODC,
                List.of(new Uint256(_dcId)),
                Arrays.asList(new TypeReference<Dc>() {
            }, new TypeReference<Pool>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public Pool getIdToPool(BigInteger _poolId) throws ContractException {
        final Function function = new Function(FUNC_GETIDTOPOOL,
                List.of(new Uint256(_poolId)),
                List.of(new TypeReference<Pool>() {
                }));
        return executeCallWithSingleValueReturn(function, Pool.class);
    }

    public void getIdToPool(BigInteger _poolId, CallCallback callback) {
        final Function function = new Function(FUNC_GETIDTOPOOL,
                List.of(new Uint256(_poolId)),
                List.of(new TypeReference<Pool>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public BigInteger getPoolAmount() throws ContractException {
        final Function function = new Function(FUNC_GETPOOLAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void getPoolAmount(CallCallback callback) {
        final Function function = new Function(FUNC_GETPOOLAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public String getTraceContract() throws ContractException {
        final Function function = new Function(FUNC_GETTRACECONTRACT,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public void getTraceContract(CallCallback callback) {
        final Function function = new Function(FUNC_GETTRACECONTRACT,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt setActivityAmount(BigInteger _activityAmount) {
        final Function function = new Function(
            FUNC_SETACTIVITYAMOUNT,
                List.of(new Uint256(_activityAmount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetActivityAmount(BigInteger _activityAmount) {
        final Function function = new Function(
            FUNC_SETACTIVITYAMOUNT,
                List.of(new Uint256(_activityAmount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setActivityAmount(BigInteger _activityAmount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETACTIVITYAMOUNT,
                List.of(new Uint256(_activityAmount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetActivityAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETACTIVITYAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt setAmountOwnedInPool(String _user, BigInteger _poolId,
        BigInteger _amount) {
        final Function function = new Function(
            FUNC_SETAMOUNTOWNEDINPOOL,
                Arrays.asList(new Address(_user),
                new Uint256(_poolId),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetAmountOwnedInPool(String _user, BigInteger _poolId,
        BigInteger _amount) {
        final Function function = new Function(
            FUNC_SETAMOUNTOWNEDINPOOL,
                Arrays.asList(new Address(_user),
                new Uint256(_poolId),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setAmountOwnedInPool(String _user, BigInteger _poolId, BigInteger _amount,
        TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETAMOUNTOWNEDINPOOL,
                Arrays.asList(new Address(_user),
                new Uint256(_poolId),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, BigInteger, BigInteger> getSetAmountOwnedInPoolInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAMOUNTOWNEDINPOOL,
                List.of(),
                Arrays.asList(new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt setCidStatus(String _cid, Boolean status) {
        final Function function = new Function(
            FUNC_SETCIDSTATUS,
                Arrays.asList(new Utf8String(_cid),
                new Bool(status)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetCidStatus(String _cid, Boolean status) {
        final Function function = new Function(
            FUNC_SETCIDSTATUS,
                Arrays.asList(new Utf8String(_cid),
                new Bool(status)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setCidStatus(String _cid, Boolean status, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETCIDSTATUS,
                Arrays.asList(new Utf8String(_cid),
                new Bool(status)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, Boolean> getSetCidStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCIDSTATUS,
                List.of(),
                Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Bool>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (String) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
        );
    }

    public TransactionReceipt setDcAmount(BigInteger _dcAmount) {
        final Function function = new Function(
            FUNC_SETDCAMOUNT,
                List.of(new Uint256(_dcAmount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDcAmount(BigInteger _dcAmount) {
        final Function function = new Function(
            FUNC_SETDCAMOUNT,
                List.of(new Uint256(_dcAmount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setDcAmount(BigInteger _dcAmount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETDCAMOUNT,
                List.of(new Uint256(_dcAmount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetDcAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDCAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt setDcOwner(BigInteger _dcId, String _newOwner) {
        final Function function = new Function(
            FUNC_SETDCOWNER,
                Arrays.asList(new Uint256(_dcId),
                new Address(_newOwner)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDcOwner(BigInteger _dcId, String _newOwner) {
        final Function function = new Function(
            FUNC_SETDCOWNER,
                Arrays.asList(new Uint256(_dcId),
                new Address(_newOwner)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setDcOwner(BigInteger _dcId, String _newOwner, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETDCOWNER,
                Arrays.asList(new Uint256(_dcId),
                new Address(_newOwner)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, String> getSetDcOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDCOWNER,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Address>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public TransactionReceipt setHashToDcId(byte[] _uniqueHash, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_SETHASHTODCID,
                Arrays.asList(new Bytes32(_uniqueHash),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetHashToDcId(byte[] _uniqueHash, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_SETHASHTODCID,
                Arrays.asList(new Bytes32(_uniqueHash),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setHashToDcId(byte[] _uniqueHash, BigInteger _dcId,
        TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETHASHTODCID,
                Arrays.asList(new Bytes32(_uniqueHash),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], BigInteger> getSetHashToDcIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETHASHTODCID,
                List.of(),
                Arrays.asList(new TypeReference<Bytes32>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt setIdToActivity(BigInteger _activityId, Activity _activity) {
        final Function function = new Function(
            FUNC_SETIDTOACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                _activity),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetIdToActivity(BigInteger _activityId,
        Activity _activity) {
        final Function function = new Function(
            FUNC_SETIDTOACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                _activity),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setIdToActivity(BigInteger _activityId, Activity _activity,
        TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETIDTOACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                _activity),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, Activity> getSetIdToActivityInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETIDTOACTIVITY,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Activity>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (Activity) results.get(1)
        );
    }

    public TransactionReceipt setIdToDc(BigInteger _dcId, Dc _dc) {
        final Function function = new Function(
            FUNC_SETIDTODC,
                Arrays.asList(new Uint256(_dcId),
                _dc),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetIdToDc(BigInteger _dcId, Dc _dc) {
        final Function function = new Function(
            FUNC_SETIDTODC,
                Arrays.asList(new Uint256(_dcId),
                _dc),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setIdToDc(BigInteger _dcId, Dc _dc, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETIDTODC,
                Arrays.asList(new Uint256(_dcId),
                _dc),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, Dc> getSetIdToDcInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETIDTODC,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Dc>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (Dc) results.get(1)
        );
    }

    public TransactionReceipt setIdToPool(BigInteger _poolId, Pool _pool) {
        final Function function = new Function(
            FUNC_SETIDTOPOOL,
                Arrays.asList(new Uint256(_poolId),
                _pool),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetIdToPool(BigInteger _poolId, Pool _pool) {
        final Function function = new Function(
            FUNC_SETIDTOPOOL,
                Arrays.asList(new Uint256(_poolId),
                _pool),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setIdToPool(BigInteger _poolId, Pool _pool, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETIDTOPOOL,
                Arrays.asList(new Uint256(_poolId),
                _pool),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, Pool> getSetIdToPoolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETIDTOPOOL,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Pool>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (Pool) results.get(1)
        );
    }

    public TransactionReceipt setPoolAmount(BigInteger _poolAmount) {
        final Function function = new Function(
            FUNC_SETPOOLAMOUNT,
                List.of(new Uint256(_poolAmount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetPoolAmount(BigInteger _poolAmount) {
        final Function function = new Function(
            FUNC_SETPOOLAMOUNT,
                List.of(new Uint256(_poolAmount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setPoolAmount(BigInteger _poolAmount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_SETPOOLAMOUNT,
                List.of(new Uint256(_poolAmount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetPoolAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPOOLAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }
}
