package com.topview.blc;

import com.topview.entity.struct.DataStruct.Activity;
import com.topview.entity.struct.DataStruct.Pool;
import com.topview.entity.struct.DataStruct.TraceStruct;
import lombok.Getter;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.*;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class PoolLogic extends Contract {
    public static final String[] BINARY_ARRAY = {
        "60806040526000600160146101000a81548160ff0219169083151502179055506000600160156101000a81548160ff0219169083151502179055503480156200004757600080fd5b50604051620045803803806200458083398181016040528101906200006d91906200010d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200019c565b600081519050620001078162000182565b92915050565b600080604083850312156200012157600080fd5b60006200013185828601620000f6565b92505060206200014485828601620000f6565b9150509250929050565b60006200015b8262000162565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200018d816200014e565b81146200019957600080fd5b50565b6143d480620001ac6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063adda6b1e11610066578063adda6b1e1461015b578063ba47bc061461018c578063cf424209146101c1578063f00388f7146101f1578063f90c2da81461020d57610093565b80633c14d81214610098578063a0712d68146100c9578063a5b5d648146100fa578063a69439291461012a575b600080fd5b6100b260048036038101906100ad9190613171565b61023e565b6040516100c0929190613f62565b60405180910390f35b6100e360048036038101906100de9190613385565b61043c565b6040516100f1929190613f62565b60405180910390f35b610114600480360381019061010f919061309a565b610fc1565b6040516101219190613e6b565b60405180910390f35b610144600480360381019061013f9190612f77565b6113cf565b604051610152929190613ca5565b60405180910390f35b61017560048036038101906101709190613385565b6116fb565b604051610183929190613f62565b60405180910390f35b6101a660048036038101906101a19190613385565b6117b2565b6040516101b896959493929190613c36565b60405180910390f35b6101db60048036038101906101d691906131dd565b611a86565b6040516101e89190613e6b565b60405180910390f35b61020b60048036038101906102069190612fcb565b612109565b005b610227600480360381019061022291906133d7565b612618565b604051610235929190613f62565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b815260040161029c9190613b84565b60206040518083038186803b1580156102b457600080fd5b505afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190613048565b61032b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032290613d6b565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343428308856040518263ffffffff1660e01b81526004016103859190613d19565b60206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190613048565b15610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c90613dcb565b60405180910390fd5b61042d6104288585600160006001611a86565b61043c565b80925081935050509250929050565b600080600160159054906101000a900460ff161561048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690613e4b565b60405180910390fd5b60018060156101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b81526004016105049190613b84565b60206040518083038186803b15801561051c57600080fd5b505afa158015610530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105549190613048565b610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90613d6b565b60405180910390fd5b61059b612932565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336dd21db856040518263ffffffff1660e01b81526004016105f59190613e6b565b60006040518083038186803b15801561060d57600080fd5b505afa158015610621573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061064a9190613344565b90506000816080015111610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90613d8b565b60405180910390fd5b8060a001516000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663628dd72e33876040518363ffffffff1660e01b81526004016106f4929190613bd6565b60206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906133ae565b10610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90613dab565b60405180910390fd5b8060400151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347734892336040518263ffffffff1660e01b81526004016107e49190613b84565b60206040518083038186803b1580156107fc57600080fd5b505afa158015610810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083491906133ae565b1015610875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086c90613e2b565b60405180910390fd5b61087e846116fb565b809350819450505061088e61298d565b60405180608001604052808481526020014281526020018681526020016001846080015185606001510301815250905060016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f77d365f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906133ae565b0193506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd051074856040518263ffffffff1660e01b81526004016109bc9190613e6b565b600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329281b8b85836040518363ffffffff1660e01b8152600401610a4a929190613fbb565b600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e199631484866040518363ffffffff1660e01b8152600401610ad8929190613cf0565b600060405180830381600087803b158015610af257600080fd5b505af1158015610b06573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b645ff185336040518363ffffffff1660e01b8152600401610b66929190613eaf565b600060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d82ffcc338760016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663628dd72e338c6040518363ffffffff1660e01b8152600401610c35929190613bd6565b60206040518083038186803b158015610c4d57600080fd5b505afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8591906133ae565b016040518463ffffffff1660e01b8152600401610ca493929190613bff565b600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b50505050816080018051600190039081815250506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372264b0b86846040518363ffffffff1660e01b8152600401610d42929190613fe4565b600060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd338460c0015185604001516040518463ffffffff1660e01b8152600401610ddb93929190613b9f565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b5050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360c9616e6040518163ffff", "ffff1660e01b815260040160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190613071565b90508073ffffffffffffffffffffffffffffffffffffffff1663ec22e7c38660405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020016040518060400160405280600c81526020017fe8978fe59381e993b8e980a000000000000000000000000000000000000000008152508152506040518363ffffffff1660e01b8152600401610f6c929190614014565b600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b505050505050506000600160156101000a81548160ff021916908315150217905550915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b815260040161101e9190613b84565b60206040518083038186803b15801561103657600080fd5b505afa15801561104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106e9190613048565b6110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a490613d6b565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343428308856040518263ffffffff1660e01b81526004016111079190613d19565b60206040518083038186803b15801561111f57600080fd5b505afa158015611133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111579190613048565b15611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90613dcb565b60405180910390fd5b61119f6129b8565b60405180606001604052808881526020018781526020016111c587876001600089611a86565b815250905060016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de83d67b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123357600080fd5b505afa158015611247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126b91906133ae565b0191506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638433166d836040518263ffffffff1660e01b81526004016112c89190613e6b565b600060405180830381600087803b1580156112e257600080fd5b505af11580156112f6573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4c52b7183836040518363ffffffff1660e01b8152600401611356929190613f8b565b600060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050507f29111918b683e4dedcb32e3b8df7c07ec1f656270cf493ab5f794ced8273a773823383866040516113bd9493929190613ed8565b60405180910390a15095945050505050565b600060608060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360c9616e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190613071565b905060008090505b85518110156116e957600086828151811061149457fe5b6020026020010151905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663588042b6836040518263ffffffff1660e01b81526004016114fa9190613cd5565b60206040518083038186803b15801561151257600080fd5b505afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906133ae565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d08df81826040518263ffffffff1660e01b81526004016115a69190613e6b565b60206040518083038186803b1580156115be57600080fd5b505afa1580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f69190612f4e565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611639576000859650965050505050506116f4565b8373ffffffffffffffffffffffffffffffffffffffff166308eef5c2826040518263ffffffff1660e01b81526004016116729190613e6b565b60206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906133ae565b8584815181106116ce57fe5b6020026020010181815250505050808060010191505061147d565b506001829350935050505b9250929050565b60008060016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f77d365f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176757600080fd5b505afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f91906133ae565b0191506117ab83612830565b9050915091565b6060600080600060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360c9616e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182557600080fd5b505afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d9190613071565b905061186761298d565b61186f612932565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663226a66d68b6040518263ffffffff1660e01b81526004016118c99190613e6b565b60006040518083038186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061191e91906132f0565b915091508273ffffffffffffffffffffffffffffffffffffffff16639507d39a8b6040518263ffffffff1660e01b815260040161195b9190613e6b565b60006040518083038186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119b09190613007565b82600001518260c001516000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d08df818e6040518263ffffffff1660e01b8152600401611a149190613e6b565b60206040518083038186803b158015611a2c57600080fd5b505afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a649190612f4e565b8460200151866040015198509850985098509850985050505091939550919395565b6000600160149054906101000a900460ff1615611ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acf90613e4b565b60405180910390fd5b60018060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b8152600401611b4d9190613b84565b60206040518083038186803b158015611b6557600080fd5b505afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d9190613048565b611bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd390613d6b565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343428308876040518263ffffffff1660e01b8152600401611c369190613d19565b60206040518083038186803b158015611c4e57600080fd5b505afa158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190613048565b15611cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbd90613dcb565b60405180910390fd5b611cce612932565b6040518061010001604052808881526020018781526020018581526020018481526020018481526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281525090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f6834d98860016040518363ffffffff1660e01b8152600401611d7d929190613d3b565b600060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385caaedb60016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5557600080", "fd5b505afa158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d91906133ae565b016040518263ffffffff1660e01b8152600401611eaa9190613e6b565b600060405180830381600087803b158015611ec457600080fd5b505af1158015611ed8573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4357600080fd5b505afa158015611f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7b91906133ae565b91506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372264b0b83836040518363ffffffff1660e01b8152600401611fd9929190613fe4565b600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b505050507fbf20436316cc79934dce218cc513515db230945d56ada2d7f6206efa3fdb9d456000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b15801561209357600080fd5b505afa1580156120a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cb91906133ae565b33836040516120dc93929190613f24565b60405180910390a1506000600160146101000a81548160ff02191690831515021790555095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b81526004016121649190613b84565b60206040518083038186803b15801561217c57600080fd5b505afa158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b49190613048565b6121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ea90613d6b565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385836040518263ffffffff1660e01b815260040161224e9190613b69565b60206040518083038186803b15801561226657600080fd5b505afa15801561227a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229e9190613048565b6122dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d490613d6b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d08df81836040518263ffffffff1660e01b815260040161234e9190613e6b565b60206040518083038186803b15801561236657600080fd5b505afa15801561237a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239e9190612f4e565b73ffffffffffffffffffffffffffffffffffffffff16146123f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123eb90613e0b565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b645ff182846040518363ffffffff1660e01b8152600401612450929190613e86565b600060405180830381600087803b15801561246a57600080fd5b505af115801561247e573d6000803e3d6000fd5b5050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360c9616e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124eb57600080fd5b505afa1580156124ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125239190613071565b90508073ffffffffffffffffffffffffffffffffffffffff1663ec22e7c38360405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020014281526020016040518060400160405280600c81526020017fe8978fe59381e8bdace8b5a000000000000000000000000000000000000000008152508152506040518363ffffffff1660e01b81526004016125e1929190614014565b600060405180830381600087803b1580156125fb57600080fd5b505af115801561260f573d6000803e3d6000fd5b50505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b81526004016126769190613b84565b60206040518083038186803b15801561268e57600080fd5b505afa1580156126a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c69190613048565b612705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fc90613d6b565b60405180910390fd5b61270d6129b8565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663206770d7866040518263ffffffff1660e01b81526004016127679190613e6b565b60006040518083038186803b15801561277f57600080fd5b505afa158015612793573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127bc9190613284565b509050806020015180519060200120848051906020012014612813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280a90613deb565b60405180910390fd5b612820816040015161043c565b8093508194505050509250929050565b600061283a612932565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336dd21db846040518263ffffffff1660e01b81526004016128949190613e6b565b60006040518083038186803b1580156128ac57600080fd5b505afa1580156128c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128e99190613344565b9050338160000151826020015183608001518460c00151604051602001612914959493929190613b12565b60405160208183030381529060405280519060200120915050919050565b604051806101000160405280606081526020016060815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060800160405280600080191681526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160608152602001600081525090565b6000813590506129e88161432b565b92915050565b6000815190506129fd8161432b565b92915050565b600082601f830112612a1457600080fd5b8135612a27612a2282614071565b614044565b91508181835260208401935060208101905083856020840282011115612a4c57600080fd5b60005b83811015612a7c5781612a628882612b0f565b845260208401935060208301925050600181019050612a4f565b5050505092915050565b600082601f830112612a9757600080fd5b8151612aaa612aa582614099565b614044565b9150818183526020840193506020810190508360005b83811015612af05781518601612ad68882612e98565b845260208401935060208301925050600181019050612ac0565b5050505092915050565b600081519050612b0981614342565b92915050565b600081359050612b1e81614359565b92915050565b600081519050612b3381614359565b92915050565b600082601f830112612b4a57600080fd5b8135612b5d612b58826140c1565b614044565b91508082526020830160208301858383011115612b7957600080fd5b612b8483828461428b565b50505092915050565b600082601f830112612b9e57600080fd5b8151612bb1612bac826140c1565b614044565b91508082526020830160208301858383011115612bcd57600080fd5b612bd883828461429a565b50505092915050565b600081519050612bf081614370565b92915050565b600082601f830112612c0757600080fd5b8135612c1a612c15826140ed565b614044565b91508082526020830160208301858383011115612c3657600080fd5b612c4183828461428b565b50505092915050565b600082601f830112612c5b57600080fd5b8151612c6e612c69826140ed565b614044565b91508082526020830160208301858383011115612c8a57600080fd5b612c9583828461429a565b50505092915050565b600060608284031215612cb057600080fd5b612cba6060614044565b9050600082015167ffffffffffffffff811115612cd657600080fd5b612ce284828501612c4a565b600083015250602082015167ffffffffffffffff811115612d0257600080fd5b612d0e84828501612b8d565b6020830152506040612d2284828501612f39565b60408301525092915050565b600060808284031215612d4057600080fd5b612d4a6080614044565b90506000612d5a84828501612b24565b6000830152506020612d6e84828501612f39565b6020830152506040612d8284828501612f39565b6040830152506060612d9684828501612f39565b60608301525092915050565b60006101008284031215612db557600080fd5b612dc0610100614044565b9050600082015167ffffffffffffffff811115612ddc57600080fd5b612de884828501612c4a565b600083015250602082015167ffffffffffffffff811115612e0857600080fd5b612e1484828501612c4a565b6020830152506040612e2884828501612f39565b6040830152506060612e3c84828501612f39565b6060830152506080612e5084828501612f39565b608083", "", "8181036000830152613e6481613874565b9050919050565b6000602082019050613e806000830184613aec565b92915050565b6000604082019050613e9b6000830185613aec565b613ea8602083018461348c565b9392505050565b6000604082019050613ec46000830185613aec565b613ed16020830184613457565b9392505050565b6000608082019050613eed6000830187613aec565b613efa6020830186613457565b8181036040830152613f0c81856138b4565b9050613f1b6060830184613aec565b95945050505050565b6000606082019050613f396000830186613aec565b613f466020830185613457565b8181036040830152613f588184613960565b9050949350505050565b6000604082019050613f776000830185613aec565b613f8460208301846135a3565b9392505050565b6000604082019050613fa06000830185613aec565b8181036020830152613fb281846138b4565b90509392505050565b600060a082019050613fd06000830185613aec565b613fdd602083018461390b565b9392505050565b6000604082019050613ff96000830185613aec565b818103602083015261400b8184613960565b90509392505050565b60006040820190506140296000830185613aec565b818103602083015261403b8184613a7a565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561406757600080fd5b8060405250919050565b600067ffffffffffffffff82111561408857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156140b057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156140d857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561410457600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006141ea8261422b565b9050919050565b60006141fc8261422b565b9050919050565b60008115159050919050565b6000819050919050565b6000614224826141df565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061426082614267565b9050919050565b600061427282614279565b9050919050565b60006142848261422b565b9050919050565b82818337600083830152505050565b60005b838110156142b857808201518184015260208101905061429d565b838111156142c7576000848401525b50505050565b60006142d8826142f1565b9050919050565b60006142ea826142f1565b9050919050565b60006142fc8261431e565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b614334816141df565b811461433f57600080fd5b50565b61434b81614203565b811461435657600080fd5b50565b6143628161420f565b811461436d57600080fd5b50565b61437981614219565b811461438457600080fd5b50565b6143908161424b565b811461439b57600080fd5b5056fea26469706673582212204ef9c3d7b1ea4e90210b603a11ca5c435b9f8c3fc2c19b014c906f9a49514ef164736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataStructs.Activity\",\"name\":\"activity\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCreateActivity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataStructs.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"LogCreatePool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"beforeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHash\",\"type\":\"bytes32[]\"}],\"name\":\"checkDcAndReturnTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_DcName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activityId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activityId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedKey\",\"type\":\"bytes\"}],\"name\":\"getDcFromActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"getDcHistoryAndMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operateTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"operateRecord\",\"type\":\"string\"}],\"internalType\":\"struct Trace.TraceStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"give\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mintNotForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    @Getter
    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BEFOREMINT = "beforeMint";

    public static final String FUNC_CHECKDCANDRETURNTIME = "checkDcAndReturnTime";

    public static final String FUNC_CREATEACTIVITY = "createActivity";

    public static final String FUNC_CREATEPOOL = "createPool";

    public static final String FUNC_GETDCFROMACTIVITY = "getDcFromActivity";

    public static final String FUNC_GETDCHISTORYANDMESSAGE = "getDcHistoryAndMessage";

    public static final String FUNC_GIVE = "give";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTNOTFORSALE = "mintNotForSale";

    public static final Event LOGCREATEACTIVITY_EVENT = new Event("LogCreateActivity",
            Arrays.asList(new TypeReference<Uint256>() {
        }, new TypeReference<Address>() {
        }, new TypeReference<Activity>() {
        }, new TypeReference<Uint256>() {
        }));

    public static final Event LOGCREATEPOOL_EVENT = new Event("LogCreatePool",
            Arrays.asList(new TypeReference<Uint256>() {
        }, new TypeReference<Address>() {
        }, new TypeReference<Pool>() {
        }));

    protected PoolLogic(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static PoolLogic load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PoolLogic(contractAddress, client, credential);
    }

    public static PoolLogic deploy(Client client, CryptoKeyPair credential, String _poolDataAddress,
        String _userLogicAddress) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList(new Address(_poolDataAddress),
            new Address(_userLogicAddress)));
        return deploy(PoolLogic.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public List<LogCreateActivityEventResponse> getLogCreateActivityEvents(
        TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCREATEACTIVITY_EVENT, transactionReceipt);
        ArrayList<LogCreateActivityEventResponse> responses = new ArrayList<>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogCreateActivityEventResponse typedResponse = new LogCreateActivityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.activityId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.activity = (Activity) eventValues.getNonIndexedValues().get(2);
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<LogCreatePoolEventResponse> getLogCreatePoolEvents(
        TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCREATEPOOL_EVENT, transactionReceipt);
        ArrayList<LogCreatePoolEventResponse> responses = new ArrayList<>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogCreatePoolEventResponse typedResponse = new LogCreatePoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.poolId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pool = (Pool) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Tuple2<BigInteger, byte[]> beforeMint(BigInteger _poolId) throws ContractException {
        final Function function = new Function(FUNC_BEFOREMINT,
                List.of(new Uint256(_poolId)),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue());
    }

    public void beforeMint(BigInteger _poolId, CallCallback callback) {
        final Function function = new Function(FUNC_BEFOREMINT,
                List.of(new Uint256(_poolId)),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public Tuple2<Boolean, List<BigInteger>> checkDcAndReturnTime(String owner,
        List<byte[]> collectionHash) throws ContractException {
        final Function function = new Function(FUNC_CHECKDCANDRETURNTIME,
                Arrays.asList(new Address(owner),
                        new DynamicArray<>(
                                Bytes32.class,
                                org.fisco.bcos.sdk.v3.codec.Utils.typeMap(collectionHash, Bytes32.class))),
                Arrays.asList(new TypeReference<Bool>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
                (Boolean) results.get(0).getValue(),
                convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public void checkDcAndReturnTime(String owner, List<byte[]> collectionHash,
                                     CallCallback callback) {
        final Function function = new Function(FUNC_CHECKDCANDRETURNTIME,
                Arrays.asList(new Address(owner),
                        new DynamicArray<>(
                                Bytes32.class,
                                org.fisco.bcos.sdk.v3.codec.Utils.typeMap(collectionHash, Bytes32.class))),
                Arrays.asList(new TypeReference<Bool>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt createActivity(String _name, byte[] _encodedKey, String _cid,
        String _DcName, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
                Arrays.asList(new Utf8String(_name),
                new DynamicBytes(_encodedKey),
                new Utf8String(_cid),
                new Utf8String(_DcName),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForCreateActivity(String _name, byte[] _encodedKey,
        String _cid, String _DcName, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
                Arrays.asList(new Utf8String(_name),
                new DynamicBytes(_encodedKey),
                new Utf8String(_cid),
                new Utf8String(_DcName),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String createActivity(String _name, byte[] _encodedKey, String _cid, String _DcName,
        BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
                Arrays.asList(new Utf8String(_name),
                new DynamicBytes(_encodedKey),
                new Utf8String(_cid),
                new Utf8String(_DcName),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, byte[], String, String, BigInteger> getCreateActivityInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACTIVITY,
                List.of(),
                Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<DynamicBytes>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple1<BigInteger> getCreateActivityOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEACTIVITY,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt createPool(String _cid, String _name, BigInteger _limit,
        BigInteger _price, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name),
                new Uint256(_limit),
                new Uint256(_price),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForCreatePool(String _cid, String _name, BigInteger _limit,
        BigInteger _price, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name),
                new Uint256(_limit),
                new Uint256(_price),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String createPool(String _cid, String _name, BigInteger _limit, BigInteger _price,
        BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name),
                new Uint256(_limit),
                new Uint256(_price),
                new Uint256(_amount)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getCreatePoolInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPOOL,
                List.of(),
                Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple1<BigInteger> getCreatePoolOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPOOL,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt getDcFromActivity(BigInteger _activityId, byte[] _encodedKey) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                new DynamicBytes(_encodedKey)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGetDcFromActivity(BigInteger _activityId,
        byte[] _encodedKey) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                new DynamicBytes(_encodedKey)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String getDcFromActivity(BigInteger _activityId, byte[] _encodedKey,
        TransactionCallback callback) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
                Arrays.asList(new Uint256(_activityId),
                new DynamicBytes(_encodedKey)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, byte[]> getGetDcFromActivityInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETDCFROMACTIVITY,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<DynamicBytes>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getGetDcFromActivityOutput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETDCFROMACTIVITY,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public Tuple6<DynamicArray<TraceStruct>, byte[], String, String, String, BigInteger> getDcHistoryAndMessage(
        BigInteger _dcId) throws ContractException {
        final Function function = new Function(FUNC_GETDCHISTORYANDMESSAGE,
                List.of(new Uint256(_dcId)),
                Arrays.asList(new TypeReference<DynamicArray<TraceStruct>>() {
            }, new TypeReference<Bytes32>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<>(
                new DynamicArray<>(TraceStruct.class, (List<TraceStruct>) results.get(0).getValue()),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue());
    }

    public void getDcHistoryAndMessage(BigInteger _dcId, CallCallback callback) {
        final Function function = new Function(FUNC_GETDCHISTORYANDMESSAGE,
                List.of(new Uint256(_dcId)),
                Arrays.asList(new TypeReference<DynamicArray<TraceStruct>>() {
            }, new TypeReference<Bytes32>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt give(String _to, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_GIVE,
                Arrays.asList(new Address(_to),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGive(String _to, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_GIVE,
                Arrays.asList(new Address(_to),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String give(String _to, BigInteger _dcId, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_GIVE,
                Arrays.asList(new Address(_to),
                new Uint256(_dcId)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, BigInteger> getGiveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GIVE,
                List.of(),
                Arrays.asList(new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt mint(BigInteger _poolId) {
        final Function function = new Function(
            FUNC_MINT,
                List.of(new Uint256(_poolId)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForMint(BigInteger _poolId) {
        final Function function = new Function(
            FUNC_MINT,
                List.of(new Uint256(_poolId)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String mint(BigInteger _poolId, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_MINT,
                List.of(new Uint256(_poolId)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getMintInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getMintOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINT,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public TransactionReceipt mintNotForSale(String _cid, String _name) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name)),
                Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForMintNotForSale(String _cid, String _name) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name)),
                Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String mintNotForSale(String _cid, String _name, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
                Arrays.asList(new Utf8String(_cid),
                new Utf8String(_name)),
                Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getMintNotForSaleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINTNOTFORSALE,
                List.of(),
                Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getMintNotForSaleOutput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINTNOTFORSALE,
                List.of(),
                Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public static class LogCreateActivityEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger activityId;

        public String operator;

        public Activity activity;

        public BigInteger amount;
    }

    public static class LogCreatePoolEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger poolId;

        public String operator;

        public Pool pool;
    }
}
