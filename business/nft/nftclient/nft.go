// Code generated by goctl. DO NOT EDIT.
// Source: nft.proto

package nftclient

import (
	"Nft-Go/common/api/nft"
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountMessageVO                 = nft.AccountMessageVO
	ActivityDetailsVO                = nft.ActivityDetailsVO
	ActivityPageVO                   = nft.ActivityPageVO
	ActivityPageVOList               = nft.ActivityPageVOList
	BuyFromPoolRequest               = nft.BuyFromPoolRequest
	CollectionMessageOnChainVO       = nft.CollectionMessageOnChainVO
	CreateActivityRequest            = nft.CreateActivityRequest
	CreatePoolRequest                = nft.CreatePoolRequest
	DcDetailVO                       = nft.DcDetailVO
	DcOverviewVO                     = nft.DcOverviewVO
	DcPageVO                         = nft.DcPageVO
	DcPageVOList                     = nft.DcPageVOList
	Empty                            = nft.Empty
	GetDcByIdRequest                 = nft.GetDcByIdRequest
	GetDcFromActivityRequest         = nft.GetDcFromActivityRequest
	GetDcHistoryRequest              = nft.GetDcHistoryRequest
	GetMessageByAddressOrHashDTO     = nft.GetMessageByAddressOrHashDTO
	GetMessageByAddressOrHashRequest = nft.GetMessageByAddressOrHashRequest
	GetOneActivityRequest            = nft.GetOneActivityRequest
	GetPoolByIdRequest               = nft.GetPoolByIdRequest
	GiveDcRequest                    = nft.GiveDcRequest
	PageRequest                      = nft.PageRequest
	PoolDetailsVO                    = nft.PoolDetailsVO
	PoolPageVO                       = nft.PoolPageVO
	PoolPageVOList                   = nft.PoolPageVOList
	Response                         = nft.Response
	SearchActivitiesRequest          = nft.SearchActivitiesRequest
	SelectDcRequest                  = nft.SelectDcRequest
	SelectPoolRequest                = nft.SelectPoolRequest
	TraceBackVO                      = nft.TraceBackVO

	Nft interface {
		GetMessageByAddressOrHash(ctx context.Context, in *GetMessageByAddressOrHashRequest, opts ...grpc.CallOption) (*GetMessageByAddressOrHashDTO, error)
		CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Response, error)
		PrizeDcFromActivity(ctx context.Context, in *GetDcFromActivityRequest, opts ...grpc.CallOption) (*Response, error)
		GetActivityPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ActivityPageVOList, error)
		GetDcPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*DcPageVOList, error)
		GetPoolPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PoolPageVOList, error)
		GetOneActivity(ctx context.Context, in *GetOneActivityRequest, opts ...grpc.CallOption) (*ActivityDetailsVO, error)
		SearchActivities(ctx context.Context, in *SearchActivitiesRequest, opts ...grpc.CallOption) (*ActivityPageVOList, error)
		GiveDc(ctx context.Context, in *GiveDcRequest, opts ...grpc.CallOption) (*Response, error)
		SelectDc(ctx context.Context, in *SelectDcRequest, opts ...grpc.CallOption) (*DcPageVOList, error)
		GetDcById(ctx context.Context, in *GetDcByIdRequest, opts ...grpc.CallOption) (*DcDetailVO, error)
		GetMyDc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DcPageVOList, error)
		GetDcHistory(ctx context.Context, in *GetDcHistoryRequest, opts ...grpc.CallOption) (*CollectionMessageOnChainVO, error)
		CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Response, error)
		BuyFromPool(ctx context.Context, in *BuyFromPoolRequest, opts ...grpc.CallOption) (*Response, error)
		SelectPool(ctx context.Context, in *SelectPoolRequest, opts ...grpc.CallOption) (*PoolPageVOList, error)
		GetPoolById(ctx context.Context, in *GetPoolByIdRequest, opts ...grpc.CallOption) (*PoolDetailsVO, error)
		GetMyPool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PoolPageVOList, error)
	}

	defaultNft struct {
		cli zrpc.Client
	}
)

func NewNft(cli zrpc.Client) Nft {
	return &defaultNft{
		cli: cli,
	}
}

func (m *defaultNft) GetMessageByAddressOrHash(ctx context.Context, in *GetMessageByAddressOrHashRequest, opts ...grpc.CallOption) (*GetMessageByAddressOrHashDTO, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetMessageByAddressOrHash(ctx, in, opts...)
}

func (m *defaultNft) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Response, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.CreateActivity(ctx, in, opts...)
}

func (m *defaultNft) PrizeDcFromActivity(ctx context.Context, in *GetDcFromActivityRequest, opts ...grpc.CallOption) (*Response, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.PrizeDcFromActivity(ctx, in, opts...)
}

func (m *defaultNft) GetActivityPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*ActivityPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetActivityPages(ctx, in, opts...)
}

func (m *defaultNft) GetDcPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*DcPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetDcPages(ctx, in, opts...)
}

func (m *defaultNft) GetPoolPages(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PoolPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetPoolPages(ctx, in, opts...)
}

func (m *defaultNft) GetOneActivity(ctx context.Context, in *GetOneActivityRequest, opts ...grpc.CallOption) (*ActivityDetailsVO, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetOneActivity(ctx, in, opts...)
}

func (m *defaultNft) SearchActivities(ctx context.Context, in *SearchActivitiesRequest, opts ...grpc.CallOption) (*ActivityPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.SearchActivities(ctx, in, opts...)
}

func (m *defaultNft) GiveDc(ctx context.Context, in *GiveDcRequest, opts ...grpc.CallOption) (*Response, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GiveDc(ctx, in, opts...)
}

func (m *defaultNft) SelectDc(ctx context.Context, in *SelectDcRequest, opts ...grpc.CallOption) (*DcPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.SelectDc(ctx, in, opts...)
}

func (m *defaultNft) GetDcById(ctx context.Context, in *GetDcByIdRequest, opts ...grpc.CallOption) (*DcDetailVO, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetDcById(ctx, in, opts...)
}

func (m *defaultNft) GetMyDc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DcPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetMyDc(ctx, in, opts...)
}

func (m *defaultNft) GetDcHistory(ctx context.Context, in *GetDcHistoryRequest, opts ...grpc.CallOption) (*CollectionMessageOnChainVO, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetDcHistory(ctx, in, opts...)
}

func (m *defaultNft) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Response, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.CreatePool(ctx, in, opts...)
}

func (m *defaultNft) BuyFromPool(ctx context.Context, in *BuyFromPoolRequest, opts ...grpc.CallOption) (*Response, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.BuyFromPool(ctx, in, opts...)
}

func (m *defaultNft) SelectPool(ctx context.Context, in *SelectPoolRequest, opts ...grpc.CallOption) (*PoolPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.SelectPool(ctx, in, opts...)
}

func (m *defaultNft) GetPoolById(ctx context.Context, in *GetPoolByIdRequest, opts ...grpc.CallOption) (*PoolDetailsVO, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetPoolById(ctx, in, opts...)
}

func (m *defaultNft) GetMyPool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PoolPageVOList, error) {
	client := nft.NewNftClient(m.cli.Conn())
	return client.GetMyPool(ctx, in, opts...)
}
