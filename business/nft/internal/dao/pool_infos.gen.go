// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Nft-Go/nft/internal/model"
)

func newPoolInfo(db *gorm.DB, opts ...gen.DOOption) poolInfo {
	_poolInfo := poolInfo{}

	_poolInfo.poolInfoDo.UseDB(db, opts...)
	_poolInfo.poolInfoDo.UseModel(&model.PoolInfo{})

	tableName := _poolInfo.poolInfoDo.TableName()
	_poolInfo.ALL = field.NewAsterisk(tableName)
	_poolInfo.PoolId = field.NewInt32(tableName, "pool_id")
	_poolInfo.Cid = field.NewString(tableName, "cid")
	_poolInfo.Name = field.NewString(tableName, "name")
	_poolInfo.Description = field.NewString(tableName, "description")
	_poolInfo.Price = field.NewInt32(tableName, "price")
	_poolInfo.Amount = field.NewInt32(tableName, "amount")
	_poolInfo.Left = field.NewInt32(tableName, "left")
	_poolInfo.LimitAmount = field.NewInt32(tableName, "limit_amount")
	_poolInfo.CreatorName = field.NewString(tableName, "creator_name")
	_poolInfo.CreatorAddress = field.NewString(tableName, "creator_address")
	_poolInfo.Status = field.NewBool(tableName, "status")

	_poolInfo.fillFieldMap()

	return _poolInfo
}

type poolInfo struct {
	poolInfoDo

	ALL            field.Asterisk
	PoolId         field.Int32
	Cid            field.String
	Name           field.String
	Description    field.String
	Price          field.Int32
	Amount         field.Int32
	Left           field.Int32
	LimitAmount    field.Int32
	CreatorName    field.String
	CreatorAddress field.String
	Status         field.Bool

	fieldMap map[string]field.Expr
}

func (p poolInfo) Table(newTableName string) *poolInfo {
	p.poolInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p poolInfo) As(alias string) *poolInfo {
	p.poolInfoDo.DO = *(p.poolInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *poolInfo) updateTableName(table string) *poolInfo {
	p.ALL = field.NewAsterisk(table)
	p.PoolId = field.NewInt32(table, "pool_id")
	p.Cid = field.NewString(table, "cid")
	p.Name = field.NewString(table, "name")
	p.Description = field.NewString(table, "description")
	p.Price = field.NewInt32(table, "price")
	p.Amount = field.NewInt32(table, "amount")
	p.Left = field.NewInt32(table, "left")
	p.LimitAmount = field.NewInt32(table, "limit_amount")
	p.CreatorName = field.NewString(table, "creator_name")
	p.CreatorAddress = field.NewString(table, "creator_address")
	p.Status = field.NewBool(table, "status")

	p.fillFieldMap()

	return p
}

func (p *poolInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *poolInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["pool_id"] = p.PoolId
	p.fieldMap["cid"] = p.Cid
	p.fieldMap["name"] = p.Name
	p.fieldMap["description"] = p.Description
	p.fieldMap["price"] = p.Price
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["left"] = p.Left
	p.fieldMap["limit_amount"] = p.LimitAmount
	p.fieldMap["creator_name"] = p.CreatorName
	p.fieldMap["creator_address"] = p.CreatorAddress
	p.fieldMap["status"] = p.Status
}

func (p poolInfo) clone(db *gorm.DB) poolInfo {
	p.poolInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p poolInfo) replaceDB(db *gorm.DB) poolInfo {
	p.poolInfoDo.ReplaceDB(db)
	return p
}

type poolInfoDo struct{ gen.DO }

type IPoolInfoDo interface {
	gen.SubQuery
	Debug() IPoolInfoDo
	WithContext(ctx context.Context) IPoolInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPoolInfoDo
	WriteDB() IPoolInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPoolInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPoolInfoDo
	Not(conds ...gen.Condition) IPoolInfoDo
	Or(conds ...gen.Condition) IPoolInfoDo
	Select(conds ...field.Expr) IPoolInfoDo
	Where(conds ...gen.Condition) IPoolInfoDo
	Order(conds ...field.Expr) IPoolInfoDo
	Distinct(cols ...field.Expr) IPoolInfoDo
	Omit(cols ...field.Expr) IPoolInfoDo
	Join(table schema.Tabler, on ...field.Expr) IPoolInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPoolInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPoolInfoDo
	Group(cols ...field.Expr) IPoolInfoDo
	Having(conds ...gen.Condition) IPoolInfoDo
	Limit(limit int) IPoolInfoDo
	Offset(offset int) IPoolInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolInfoDo
	Unscoped() IPoolInfoDo
	Create(values ...*model.PoolInfo) error
	CreateInBatches(values []*model.PoolInfo, batchSize int) error
	Save(values ...*model.PoolInfo) error
	First() (*model.PoolInfo, error)
	Take() (*model.PoolInfo, error)
	Last() (*model.PoolInfo, error)
	Find() ([]*model.PoolInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PoolInfo, err error)
	FindInBatches(result *[]*model.PoolInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PoolInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPoolInfoDo
	Assign(attrs ...field.AssignExpr) IPoolInfoDo
	Joins(fields ...field.RelationField) IPoolInfoDo
	Preload(fields ...field.RelationField) IPoolInfoDo
	FirstOrInit() (*model.PoolInfo, error)
	FirstOrCreate() (*model.PoolInfo, error)
	FindByPage(offset int, limit int) (result []*model.PoolInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPoolInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p poolInfoDo) Debug() IPoolInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p poolInfoDo) WithContext(ctx context.Context) IPoolInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p poolInfoDo) ReadDB() IPoolInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p poolInfoDo) WriteDB() IPoolInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p poolInfoDo) Session(config *gorm.Session) IPoolInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p poolInfoDo) Clauses(conds ...clause.Expression) IPoolInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p poolInfoDo) Returning(value interface{}, columns ...string) IPoolInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p poolInfoDo) Not(conds ...gen.Condition) IPoolInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p poolInfoDo) Or(conds ...gen.Condition) IPoolInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p poolInfoDo) Select(conds ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p poolInfoDo) Where(conds ...gen.Condition) IPoolInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p poolInfoDo) Order(conds ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p poolInfoDo) Distinct(cols ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p poolInfoDo) Omit(cols ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p poolInfoDo) Join(table schema.Tabler, on ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p poolInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p poolInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p poolInfoDo) Group(cols ...field.Expr) IPoolInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p poolInfoDo) Having(conds ...gen.Condition) IPoolInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p poolInfoDo) Limit(limit int) IPoolInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p poolInfoDo) Offset(offset int) IPoolInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p poolInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p poolInfoDo) Unscoped() IPoolInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p poolInfoDo) Create(values ...*model.PoolInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p poolInfoDo) CreateInBatches(values []*model.PoolInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p poolInfoDo) Save(values ...*model.PoolInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p poolInfoDo) First() (*model.PoolInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolInfo), nil
	}
}

func (p poolInfoDo) Take() (*model.PoolInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolInfo), nil
	}
}

func (p poolInfoDo) Last() (*model.PoolInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolInfo), nil
	}
}

func (p poolInfoDo) Find() ([]*model.PoolInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.PoolInfo), err
}

func (p poolInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PoolInfo, err error) {
	buf := make([]*model.PoolInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p poolInfoDo) FindInBatches(result *[]*model.PoolInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p poolInfoDo) Attrs(attrs ...field.AssignExpr) IPoolInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p poolInfoDo) Assign(attrs ...field.AssignExpr) IPoolInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p poolInfoDo) Joins(fields ...field.RelationField) IPoolInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p poolInfoDo) Preload(fields ...field.RelationField) IPoolInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p poolInfoDo) FirstOrInit() (*model.PoolInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolInfo), nil
	}
}

func (p poolInfoDo) FirstOrCreate() (*model.PoolInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolInfo), nil
	}
}

func (p poolInfoDo) FindByPage(offset int, limit int) (result []*model.PoolInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p poolInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p poolInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p poolInfoDo) Delete(models ...*model.PoolInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *poolInfoDo) withDO(do gen.Dao) *poolInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
