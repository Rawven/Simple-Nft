// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	ActivityInfo *activityInfo
	DcInfo       *dcInfo
	PoolInfo     *poolInfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActivityInfo = &Q.ActivityInfo
	DcInfo = &Q.DcInfo
	PoolInfo = &Q.PoolInfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		ActivityInfo: newActivityInfo(db, opts...),
		DcInfo:       newDcInfo(db, opts...),
		PoolInfo:     newPoolInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActivityInfo activityInfo
	DcInfo       dcInfo
	PoolInfo     poolInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		ActivityInfo: q.ActivityInfo.clone(db),
		DcInfo:       q.DcInfo.clone(db),
		PoolInfo:     q.PoolInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		ActivityInfo: q.ActivityInfo.replaceDB(db),
		DcInfo:       q.DcInfo.replaceDB(db),
		PoolInfo:     q.PoolInfo.replaceDB(db),
	}
}

type queryCtx struct {
	ActivityInfo IActivityInfoDo
	DcInfo       IDcInfoDo
	PoolInfo     IPoolInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActivityInfo: q.ActivityInfo.WithContext(ctx),
		DcInfo:       q.DcInfo.WithContext(ctx),
		PoolInfo:     q.PoolInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
