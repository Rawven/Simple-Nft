// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Nft-Go/nft/internal/model"
)

func newDcInfo(db *gorm.DB, opts ...gen.DOOption) dcInfo {
	_dcInfo := dcInfo{}

	_dcInfo.dcInfoDo.UseDB(db, opts...)
	_dcInfo.dcInfoDo.UseModel(&model.DcInfo{})

	tableName := _dcInfo.dcInfoDo.TableName()
	_dcInfo.ALL = field.NewAsterisk(tableName)
	_dcInfo.Id = field.NewInt32(tableName, "id")
	_dcInfo.Hash = field.NewString(tableName, "hash")
	_dcInfo.Cid = field.NewString(tableName, "cid")
	_dcInfo.Name = field.NewString(tableName, "name")
	_dcInfo.Description = field.NewString(tableName, "description")
	_dcInfo.Price = field.NewInt32(tableName, "price")
	_dcInfo.OwnerName = field.NewString(tableName, "owner_name")
	_dcInfo.OwnerAddress = field.NewString(tableName, "owner_address")
	_dcInfo.CreatorName = field.NewString(tableName, "creator_name")
	_dcInfo.CreatorAddress = field.NewString(tableName, "creator_address")

	_dcInfo.fillFieldMap()

	return _dcInfo
}

type dcInfo struct {
	dcInfoDo

	ALL            field.Asterisk
	Id             field.Int32
	Hash           field.String
	Cid            field.String
	Name           field.String
	Description    field.String
	Price          field.Int32
	OwnerName      field.String
	OwnerAddress   field.String
	CreatorName    field.String
	CreatorAddress field.String

	fieldMap map[string]field.Expr
}

func (d dcInfo) Table(newTableName string) *dcInfo {
	d.dcInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dcInfo) As(alias string) *dcInfo {
	d.dcInfoDo.DO = *(d.dcInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dcInfo) updateTableName(table string) *dcInfo {
	d.ALL = field.NewAsterisk(table)
	d.Id = field.NewInt32(table, "id")
	d.Hash = field.NewString(table, "hash")
	d.Cid = field.NewString(table, "cid")
	d.Name = field.NewString(table, "name")
	d.Description = field.NewString(table, "description")
	d.Price = field.NewInt32(table, "price")
	d.OwnerName = field.NewString(table, "owner_name")
	d.OwnerAddress = field.NewString(table, "owner_address")
	d.CreatorName = field.NewString(table, "creator_name")
	d.CreatorAddress = field.NewString(table, "creator_address")

	d.fillFieldMap()

	return d
}

func (d *dcInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dcInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.Id
	d.fieldMap["hash"] = d.Hash
	d.fieldMap["cid"] = d.Cid
	d.fieldMap["name"] = d.Name
	d.fieldMap["description"] = d.Description
	d.fieldMap["price"] = d.Price
	d.fieldMap["owner_name"] = d.OwnerName
	d.fieldMap["owner_address"] = d.OwnerAddress
	d.fieldMap["creator_name"] = d.CreatorName
	d.fieldMap["creator_address"] = d.CreatorAddress
}

func (d dcInfo) clone(db *gorm.DB) dcInfo {
	d.dcInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dcInfo) replaceDB(db *gorm.DB) dcInfo {
	d.dcInfoDo.ReplaceDB(db)
	return d
}

type dcInfoDo struct{ gen.DO }

type IDcInfoDo interface {
	gen.SubQuery
	Debug() IDcInfoDo
	WithContext(ctx context.Context) IDcInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDcInfoDo
	WriteDB() IDcInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDcInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDcInfoDo
	Not(conds ...gen.Condition) IDcInfoDo
	Or(conds ...gen.Condition) IDcInfoDo
	Select(conds ...field.Expr) IDcInfoDo
	Where(conds ...gen.Condition) IDcInfoDo
	Order(conds ...field.Expr) IDcInfoDo
	Distinct(cols ...field.Expr) IDcInfoDo
	Omit(cols ...field.Expr) IDcInfoDo
	Join(table schema.Tabler, on ...field.Expr) IDcInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDcInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDcInfoDo
	Group(cols ...field.Expr) IDcInfoDo
	Having(conds ...gen.Condition) IDcInfoDo
	Limit(limit int) IDcInfoDo
	Offset(offset int) IDcInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDcInfoDo
	Unscoped() IDcInfoDo
	Create(values ...*model.DcInfo) error
	CreateInBatches(values []*model.DcInfo, batchSize int) error
	Save(values ...*model.DcInfo) error
	First() (*model.DcInfo, error)
	Take() (*model.DcInfo, error)
	Last() (*model.DcInfo, error)
	Find() ([]*model.DcInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DcInfo, err error)
	FindInBatches(result *[]*model.DcInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DcInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDcInfoDo
	Assign(attrs ...field.AssignExpr) IDcInfoDo
	Joins(fields ...field.RelationField) IDcInfoDo
	Preload(fields ...field.RelationField) IDcInfoDo
	FirstOrInit() (*model.DcInfo, error)
	FirstOrCreate() (*model.DcInfo, error)
	FindByPage(offset int, limit int) (result []*model.DcInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDcInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dcInfoDo) Debug() IDcInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d dcInfoDo) WithContext(ctx context.Context) IDcInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dcInfoDo) ReadDB() IDcInfoDo {
	return d.Clauses(dbresolver.Read)
}

func (d dcInfoDo) WriteDB() IDcInfoDo {
	return d.Clauses(dbresolver.Write)
}

func (d dcInfoDo) Session(config *gorm.Session) IDcInfoDo {
	return d.withDO(d.DO.Session(config))
}

func (d dcInfoDo) Clauses(conds ...clause.Expression) IDcInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dcInfoDo) Returning(value interface{}, columns ...string) IDcInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dcInfoDo) Not(conds ...gen.Condition) IDcInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dcInfoDo) Or(conds ...gen.Condition) IDcInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dcInfoDo) Select(conds ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dcInfoDo) Where(conds ...gen.Condition) IDcInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dcInfoDo) Order(conds ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dcInfoDo) Distinct(cols ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dcInfoDo) Omit(cols ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dcInfoDo) Join(table schema.Tabler, on ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dcInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dcInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dcInfoDo) Group(cols ...field.Expr) IDcInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dcInfoDo) Having(conds ...gen.Condition) IDcInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dcInfoDo) Limit(limit int) IDcInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dcInfoDo) Offset(offset int) IDcInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dcInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDcInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dcInfoDo) Unscoped() IDcInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dcInfoDo) Create(values ...*model.DcInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dcInfoDo) CreateInBatches(values []*model.DcInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dcInfoDo) Save(values ...*model.DcInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dcInfoDo) First() (*model.DcInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DcInfo), nil
	}
}

func (d dcInfoDo) Take() (*model.DcInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DcInfo), nil
	}
}

func (d dcInfoDo) Last() (*model.DcInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DcInfo), nil
	}
}

func (d dcInfoDo) Find() ([]*model.DcInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DcInfo), err
}

func (d dcInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DcInfo, err error) {
	buf := make([]*model.DcInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dcInfoDo) FindInBatches(result *[]*model.DcInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dcInfoDo) Attrs(attrs ...field.AssignExpr) IDcInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dcInfoDo) Assign(attrs ...field.AssignExpr) IDcInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dcInfoDo) Joins(fields ...field.RelationField) IDcInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dcInfoDo) Preload(fields ...field.RelationField) IDcInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dcInfoDo) FirstOrInit() (*model.DcInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DcInfo), nil
	}
}

func (d dcInfoDo) FirstOrCreate() (*model.DcInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DcInfo), nil
	}
}

func (d dcInfoDo) FindByPage(offset int, limit int) (result []*model.DcInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dcInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dcInfoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dcInfoDo) Delete(models ...*model.DcInfo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dcInfoDo) withDO(do gen.Dao) *dcInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
