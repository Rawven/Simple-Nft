// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Nft-Go/nft/internal/model"
)

func newActivityInfo(db *gorm.DB, opts ...gen.DOOption) activityInfo {
	_activityInfo := activityInfo{}

	_activityInfo.activityInfoDo.UseDB(db, opts...)
	_activityInfo.activityInfoDo.UseModel(&model.ActivityInfo{})

	tableName := _activityInfo.activityInfoDo.TableName()
	_activityInfo.ALL = field.NewAsterisk(tableName)
	_activityInfo.Id = field.NewInt32(tableName, "id")
	_activityInfo.Name = field.NewString(tableName, "name")
	_activityInfo.Description = field.NewString(tableName, "description")
	_activityInfo.DcDescription = field.NewString(tableName, "dc_description")
	_activityInfo.Cid = field.NewString(tableName, "cid")
	_activityInfo.HostName = field.NewString(tableName, "host_name")
	_activityInfo.HostAddress = field.NewString(tableName, "host_address")
	_activityInfo.Amount = field.NewInt32(tableName, "amount")
	_activityInfo.Remainder = field.NewInt32(tableName, "remainder")
	_activityInfo.Status = field.NewBool(tableName, "status")

	_activityInfo.fillFieldMap()

	return _activityInfo
}

type activityInfo struct {
	activityInfoDo

	ALL           field.Asterisk
	Id            field.Int32
	Name          field.String
	Description   field.String
	DcDescription field.String
	Cid           field.String
	HostName      field.String
	HostAddress   field.String
	Amount        field.Int32
	Remainder     field.Int32
	Status        field.Bool

	fieldMap map[string]field.Expr
}

func (a activityInfo) Table(newTableName string) *activityInfo {
	a.activityInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityInfo) As(alias string) *activityInfo {
	a.activityInfoDo.DO = *(a.activityInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityInfo) updateTableName(table string) *activityInfo {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Description = field.NewString(table, "description")
	a.DcDescription = field.NewString(table, "dc_description")
	a.Cid = field.NewString(table, "cid")
	a.HostName = field.NewString(table, "host_name")
	a.HostAddress = field.NewString(table, "host_address")
	a.Amount = field.NewInt32(table, "amount")
	a.Remainder = field.NewInt32(table, "remainder")
	a.Status = field.NewBool(table, "status")

	a.fillFieldMap()

	return a
}

func (a *activityInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.Id
	a.fieldMap["name"] = a.Name
	a.fieldMap["description"] = a.Description
	a.fieldMap["dc_description"] = a.DcDescription
	a.fieldMap["cid"] = a.Cid
	a.fieldMap["host_name"] = a.HostName
	a.fieldMap["host_address"] = a.HostAddress
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["remainder"] = a.Remainder
	a.fieldMap["status"] = a.Status
}

func (a activityInfo) clone(db *gorm.DB) activityInfo {
	a.activityInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityInfo) replaceDB(db *gorm.DB) activityInfo {
	a.activityInfoDo.ReplaceDB(db)
	return a
}

type activityInfoDo struct{ gen.DO }

type IActivityInfoDo interface {
	gen.SubQuery
	Debug() IActivityInfoDo
	WithContext(ctx context.Context) IActivityInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityInfoDo
	WriteDB() IActivityInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityInfoDo
	Not(conds ...gen.Condition) IActivityInfoDo
	Or(conds ...gen.Condition) IActivityInfoDo
	Select(conds ...field.Expr) IActivityInfoDo
	Where(conds ...gen.Condition) IActivityInfoDo
	Order(conds ...field.Expr) IActivityInfoDo
	Distinct(cols ...field.Expr) IActivityInfoDo
	Omit(cols ...field.Expr) IActivityInfoDo
	Join(table schema.Tabler, on ...field.Expr) IActivityInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityInfoDo
	Group(cols ...field.Expr) IActivityInfoDo
	Having(conds ...gen.Condition) IActivityInfoDo
	Limit(limit int) IActivityInfoDo
	Offset(offset int) IActivityInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityInfoDo
	Unscoped() IActivityInfoDo
	Create(values ...*model.ActivityInfo) error
	CreateInBatches(values []*model.ActivityInfo, batchSize int) error
	Save(values ...*model.ActivityInfo) error
	First() (*model.ActivityInfo, error)
	Take() (*model.ActivityInfo, error)
	Last() (*model.ActivityInfo, error)
	Find() ([]*model.ActivityInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityInfo, err error)
	FindInBatches(result *[]*model.ActivityInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityInfoDo
	Assign(attrs ...field.AssignExpr) IActivityInfoDo
	Joins(fields ...field.RelationField) IActivityInfoDo
	Preload(fields ...field.RelationField) IActivityInfoDo
	FirstOrInit() (*model.ActivityInfo, error)
	FirstOrCreate() (*model.ActivityInfo, error)
	FindByPage(offset int, limit int) (result []*model.ActivityInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityInfoDo) Debug() IActivityInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a activityInfoDo) WithContext(ctx context.Context) IActivityInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityInfoDo) ReadDB() IActivityInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityInfoDo) WriteDB() IActivityInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityInfoDo) Session(config *gorm.Session) IActivityInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityInfoDo) Clauses(conds ...clause.Expression) IActivityInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityInfoDo) Returning(value interface{}, columns ...string) IActivityInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityInfoDo) Not(conds ...gen.Condition) IActivityInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityInfoDo) Or(conds ...gen.Condition) IActivityInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityInfoDo) Select(conds ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityInfoDo) Where(conds ...gen.Condition) IActivityInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityInfoDo) Order(conds ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityInfoDo) Distinct(cols ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityInfoDo) Omit(cols ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityInfoDo) Join(table schema.Tabler, on ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityInfoDo) Group(cols ...field.Expr) IActivityInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityInfoDo) Having(conds ...gen.Condition) IActivityInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityInfoDo) Limit(limit int) IActivityInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityInfoDo) Offset(offset int) IActivityInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityInfoDo) Unscoped() IActivityInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityInfoDo) Create(values ...*model.ActivityInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityInfoDo) CreateInBatches(values []*model.ActivityInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityInfoDo) Save(values ...*model.ActivityInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityInfoDo) First() (*model.ActivityInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityInfo), nil
	}
}

func (a activityInfoDo) Take() (*model.ActivityInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityInfo), nil
	}
}

func (a activityInfoDo) Last() (*model.ActivityInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityInfo), nil
	}
}

func (a activityInfoDo) Find() ([]*model.ActivityInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityInfo), err
}

func (a activityInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityInfo, err error) {
	buf := make([]*model.ActivityInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityInfoDo) FindInBatches(result *[]*model.ActivityInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityInfoDo) Attrs(attrs ...field.AssignExpr) IActivityInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityInfoDo) Assign(attrs ...field.AssignExpr) IActivityInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityInfoDo) Joins(fields ...field.RelationField) IActivityInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityInfoDo) Preload(fields ...field.RelationField) IActivityInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityInfoDo) FirstOrInit() (*model.ActivityInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityInfo), nil
	}
}

func (a activityInfoDo) FirstOrCreate() (*model.ActivityInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityInfo), nil
	}
}

func (a activityInfoDo) FindByPage(offset int, limit int) (result []*model.ActivityInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityInfoDo) Delete(models ...*model.ActivityInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityInfoDo) withDO(do gen.Dao) *activityInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
