// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"Nft-Go/user/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty              = user.Empty
	IdNoticeRequest    = user.IdNoticeRequest
	LoginRequest       = user.LoginRequest
	Notice             = user.Notice
	NoticeList         = user.NoticeList
	Ranking            = user.Ranking
	RankingList        = user.RankingList
	RegisterRequest    = user.RegisterRequest
	Response           = user.Response
	TitleNoticeRequest = user.TitleNoticeRequest
	UploadRequest      = user.UploadRequest
	UserInfo           = user.UserInfo
	UserNameRequest    = user.UserNameRequest

	User interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
		Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
		RefreshTokens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
		Upload(ctx context.Context, opts ...grpc.CallOption) (user.User_UploadClient, error)
		SaveNotice(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Response, error)
		GetAllNotices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoticeList, error)
		GetNoticeByTitle(ctx context.Context, in *TitleNoticeRequest, opts ...grpc.CallOption) (*NoticeList, error)
		GetNoticeById(ctx context.Context, in *IdNoticeRequest, opts ...grpc.CallOption) (*Notice, error)
		GetUserInfoByName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*UserInfo, error)
		GetDayRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error)
		GetWeekRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error)
		GetMonthRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUser) RefreshTokens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.RefreshTokens(ctx, in, opts...)
}

func (m *defaultUser) Upload(ctx context.Context, opts ...grpc.CallOption) (user.User_UploadClient, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Upload(ctx, opts...)
}

func (m *defaultUser) SaveNotice(ctx context.Context, in *Notice, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SaveNotice(ctx, in, opts...)
}

func (m *defaultUser) GetAllNotices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NoticeList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetAllNotices(ctx, in, opts...)
}

func (m *defaultUser) GetNoticeByTitle(ctx context.Context, in *TitleNoticeRequest, opts ...grpc.CallOption) (*NoticeList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetNoticeByTitle(ctx, in, opts...)
}

func (m *defaultUser) GetNoticeById(ctx context.Context, in *IdNoticeRequest, opts ...grpc.CallOption) (*Notice, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetNoticeById(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfoByName(ctx context.Context, in *UserNameRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfoByName(ctx, in, opts...)
}

func (m *defaultUser) GetDayRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetDayRankingList(ctx, in, opts...)
}

func (m *defaultUser) GetWeekRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetWeekRankingList(ctx, in, opts...)
}

func (m *defaultUser) GetMonthRankingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankingList, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetMonthRankingList(ctx, in, opts...)
}
