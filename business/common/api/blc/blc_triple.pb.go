// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v4.25.3
// source: blc.proto

package blc

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// BlcRpcServiceClient is the client API for BlcRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlcRpcServiceClient interface {
	SignUp(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*SignUpResponse, common.ErrorWithAttachment)
	GetUserBalance(ctx context.Context, in *UserBalanceRequest, opts ...grpc_go.CallOption) (*UserBalanceResponse, common.ErrorWithAttachment)
	GetActivityAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*ActivityAmountResponse, common.ErrorWithAttachment)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment)
	GetIdToActivity(ctx context.Context, in *GetIdToActivityRequest, opts ...grpc_go.CallOption) (*ActivityAndPool, common.ErrorWithAttachment)
	BeforeMint(ctx context.Context, in *BeforeMintRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment)
	GetDcFromActivity(ctx context.Context, in *GetDcFromActivityRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment)
	GetUserStatus(ctx context.Context, in *GetUserStatusRequest, opts ...grpc_go.CallOption) (*UserStatusResponse, common.ErrorWithAttachment)
	CheckDcAndReturnTime(ctx context.Context, in *CheckDcAndReturnTimeRequest, opts ...grpc_go.CallOption) (*CheckDcAndReturnTimeOutputDTO, common.ErrorWithAttachment)
	GetHashToDcId(ctx context.Context, in *GetHashToDcIdRequest, opts ...grpc_go.CallOption) (*GetHashToDcIdResponse, common.ErrorWithAttachment)
	Give(ctx context.Context, in *GiveRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment)
	GetDcHistoryAndMessage(ctx context.Context, in *GetDcHistoryAndMessageRequest, opts ...grpc_go.CallOption) (*DcHistoryAndMessageOutputDTO, common.ErrorWithAttachment)
	GetPoolAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*PoolAmountResponse, common.ErrorWithAttachment)
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment)
	Mint(ctx context.Context, in *MintRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment)
}

type blcRpcServiceClient struct {
	cc *triple.TripleConn
}

type BlcRpcServiceClientImpl struct {
	SignUp                 func(ctx context.Context, in *emptypb.Empty) (*SignUpResponse, error)
	GetUserBalance         func(ctx context.Context, in *UserBalanceRequest) (*UserBalanceResponse, error)
	GetActivityAmount      func(ctx context.Context, in *emptypb.Empty) (*ActivityAmountResponse, error)
	CreateActivity         func(ctx context.Context, in *CreateActivityRequest) (*emptypb.Empty, error)
	GetIdToActivity        func(ctx context.Context, in *GetIdToActivityRequest) (*ActivityAndPool, error)
	BeforeMint             func(ctx context.Context, in *BeforeMintRequest) (*BeforeMintDTO, error)
	GetDcFromActivity      func(ctx context.Context, in *GetDcFromActivityRequest) (*BeforeMintDTO, error)
	GetUserStatus          func(ctx context.Context, in *GetUserStatusRequest) (*UserStatusResponse, error)
	CheckDcAndReturnTime   func(ctx context.Context, in *CheckDcAndReturnTimeRequest) (*CheckDcAndReturnTimeOutputDTO, error)
	GetHashToDcId          func(ctx context.Context, in *GetHashToDcIdRequest) (*GetHashToDcIdResponse, error)
	Give                   func(ctx context.Context, in *GiveRequest) (*emptypb.Empty, error)
	GetDcHistoryAndMessage func(ctx context.Context, in *GetDcHistoryAndMessageRequest) (*DcHistoryAndMessageOutputDTO, error)
	GetPoolAmount          func(ctx context.Context, in *emptypb.Empty) (*PoolAmountResponse, error)
	CreatePool             func(ctx context.Context, in *CreatePoolRequest) (*emptypb.Empty, error)
	Mint                   func(ctx context.Context, in *MintRequest) (*BeforeMintDTO, error)
}

func (c *BlcRpcServiceClientImpl) GetDubboStub(cc *triple.TripleConn) BlcRpcServiceClient {
	return NewBlcRpcServiceClient(cc)
}

func (c *BlcRpcServiceClientImpl) XXX_InterfaceName() string {
	return "api.BlcRpcService"
}

func NewBlcRpcServiceClient(cc *triple.TripleConn) BlcRpcServiceClient {
	return &blcRpcServiceClient{cc}
}

func (c *blcRpcServiceClient) SignUp(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*SignUpResponse, common.ErrorWithAttachment) {
	out := new(SignUpResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SignUp", in, out)
}

func (c *blcRpcServiceClient) GetUserBalance(ctx context.Context, in *UserBalanceRequest, opts ...grpc_go.CallOption) (*UserBalanceResponse, common.ErrorWithAttachment) {
	out := new(UserBalanceResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBalance", in, out)
}

func (c *blcRpcServiceClient) GetActivityAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*ActivityAmountResponse, common.ErrorWithAttachment) {
	out := new(ActivityAmountResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetActivityAmount", in, out)
}

func (c *blcRpcServiceClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment) {
	out := new(emptypb.Empty)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateActivity", in, out)
}

func (c *blcRpcServiceClient) GetIdToActivity(ctx context.Context, in *GetIdToActivityRequest, opts ...grpc_go.CallOption) (*ActivityAndPool, common.ErrorWithAttachment) {
	out := new(ActivityAndPool)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetIdToActivity", in, out)
}

func (c *blcRpcServiceClient) BeforeMint(ctx context.Context, in *BeforeMintRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment) {
	out := new(BeforeMintDTO)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BeforeMint", in, out)
}

func (c *blcRpcServiceClient) GetDcFromActivity(ctx context.Context, in *GetDcFromActivityRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment) {
	out := new(BeforeMintDTO)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDcFromActivity", in, out)
}

func (c *blcRpcServiceClient) GetUserStatus(ctx context.Context, in *GetUserStatusRequest, opts ...grpc_go.CallOption) (*UserStatusResponse, common.ErrorWithAttachment) {
	out := new(UserStatusResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserStatus", in, out)
}

func (c *blcRpcServiceClient) CheckDcAndReturnTime(ctx context.Context, in *CheckDcAndReturnTimeRequest, opts ...grpc_go.CallOption) (*CheckDcAndReturnTimeOutputDTO, common.ErrorWithAttachment) {
	out := new(CheckDcAndReturnTimeOutputDTO)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CheckDcAndReturnTime", in, out)
}

func (c *blcRpcServiceClient) GetHashToDcId(ctx context.Context, in *GetHashToDcIdRequest, opts ...grpc_go.CallOption) (*GetHashToDcIdResponse, common.ErrorWithAttachment) {
	out := new(GetHashToDcIdResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetHashToDcId", in, out)
}

func (c *blcRpcServiceClient) Give(ctx context.Context, in *GiveRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment) {
	out := new(emptypb.Empty)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Give", in, out)
}

func (c *blcRpcServiceClient) GetDcHistoryAndMessage(ctx context.Context, in *GetDcHistoryAndMessageRequest, opts ...grpc_go.CallOption) (*DcHistoryAndMessageOutputDTO, common.ErrorWithAttachment) {
	out := new(DcHistoryAndMessageOutputDTO)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDcHistoryAndMessage", in, out)
}

func (c *blcRpcServiceClient) GetPoolAmount(ctx context.Context, in *emptypb.Empty, opts ...grpc_go.CallOption) (*PoolAmountResponse, common.ErrorWithAttachment) {
	out := new(PoolAmountResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetPoolAmount", in, out)
}

func (c *blcRpcServiceClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc_go.CallOption) (*emptypb.Empty, common.ErrorWithAttachment) {
	out := new(emptypb.Empty)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreatePool", in, out)
}

func (c *blcRpcServiceClient) Mint(ctx context.Context, in *MintRequest, opts ...grpc_go.CallOption) (*BeforeMintDTO, common.ErrorWithAttachment) {
	out := new(BeforeMintDTO)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Mint", in, out)
}

// BlcRpcServiceServer is the server API for BlcRpcService service.
// All implementations must embed UnimplementedBlcRpcServiceServer
// for forward compatibility
type BlcRpcServiceServer interface {
	SignUp(context.Context, *emptypb.Empty) (*SignUpResponse, error)
	GetUserBalance(context.Context, *UserBalanceRequest) (*UserBalanceResponse, error)
	GetActivityAmount(context.Context, *emptypb.Empty) (*ActivityAmountResponse, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*emptypb.Empty, error)
	GetIdToActivity(context.Context, *GetIdToActivityRequest) (*ActivityAndPool, error)
	BeforeMint(context.Context, *BeforeMintRequest) (*BeforeMintDTO, error)
	GetDcFromActivity(context.Context, *GetDcFromActivityRequest) (*BeforeMintDTO, error)
	GetUserStatus(context.Context, *GetUserStatusRequest) (*UserStatusResponse, error)
	CheckDcAndReturnTime(context.Context, *CheckDcAndReturnTimeRequest) (*CheckDcAndReturnTimeOutputDTO, error)
	GetHashToDcId(context.Context, *GetHashToDcIdRequest) (*GetHashToDcIdResponse, error)
	Give(context.Context, *GiveRequest) (*emptypb.Empty, error)
	GetDcHistoryAndMessage(context.Context, *GetDcHistoryAndMessageRequest) (*DcHistoryAndMessageOutputDTO, error)
	GetPoolAmount(context.Context, *emptypb.Empty) (*PoolAmountResponse, error)
	CreatePool(context.Context, *CreatePoolRequest) (*emptypb.Empty, error)
	Mint(context.Context, *MintRequest) (*BeforeMintDTO, error)
	mustEmbedUnimplementedBlcRpcServiceServer()
}

// UnimplementedBlcRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlcRpcServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedBlcRpcServiceServer) SignUp(context.Context, *emptypb.Empty) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetUserBalance(context.Context, *UserBalanceRequest) (*UserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetActivityAmount(context.Context, *emptypb.Empty) (*ActivityAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityAmount not implemented")
}
func (UnimplementedBlcRpcServiceServer) CreateActivity(context.Context, *CreateActivityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetIdToActivity(context.Context, *GetIdToActivityRequest) (*ActivityAndPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdToActivity not implemented")
}
func (UnimplementedBlcRpcServiceServer) BeforeMint(context.Context, *BeforeMintRequest) (*BeforeMintDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeMint not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetDcFromActivity(context.Context, *GetDcFromActivityRequest) (*BeforeMintDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDcFromActivity not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetUserStatus(context.Context, *GetUserStatusRequest) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (UnimplementedBlcRpcServiceServer) CheckDcAndReturnTime(context.Context, *CheckDcAndReturnTimeRequest) (*CheckDcAndReturnTimeOutputDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDcAndReturnTime not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetHashToDcId(context.Context, *GetHashToDcIdRequest) (*GetHashToDcIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashToDcId not implemented")
}
func (UnimplementedBlcRpcServiceServer) Give(context.Context, *GiveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Give not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetDcHistoryAndMessage(context.Context, *GetDcHistoryAndMessageRequest) (*DcHistoryAndMessageOutputDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDcHistoryAndMessage not implemented")
}
func (UnimplementedBlcRpcServiceServer) GetPoolAmount(context.Context, *emptypb.Empty) (*PoolAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolAmount not implemented")
}
func (UnimplementedBlcRpcServiceServer) CreatePool(context.Context, *CreatePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedBlcRpcServiceServer) Mint(context.Context, *MintRequest) (*BeforeMintDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (s *UnimplementedBlcRpcServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedBlcRpcServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedBlcRpcServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &BlcRpcService_ServiceDesc
}
func (s *UnimplementedBlcRpcServiceServer) XXX_InterfaceName() string {
	return "api.BlcRpcService"
}

func (UnimplementedBlcRpcServiceServer) mustEmbedUnimplementedBlcRpcServiceServer() {}

// UnsafeBlcRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlcRpcServiceServer will
// result in compilation errors.
type UnsafeBlcRpcServiceServer interface {
	mustEmbedUnimplementedBlcRpcServiceServer()
}

func RegisterBlcRpcServiceServer(s grpc_go.ServiceRegistrar, srv BlcRpcServiceServer) {
	s.RegisterService(&BlcRpcService_ServiceDesc, srv)
}

func _BlcRpcService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SignUp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBalance", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetActivityAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetActivityAmount", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateActivity", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetIdToActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdToActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetIdToActivity", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_BeforeMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BeforeMint", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetDcFromActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDcFromActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDcFromActivity", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserStatus", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_CheckDcAndReturnTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDcAndReturnTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CheckDcAndReturnTime", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetHashToDcId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashToDcIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetHashToDcId", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_Give_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Give", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetDcHistoryAndMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDcHistoryAndMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDcHistoryAndMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_GetPoolAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetPoolAmount", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreatePool", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _BlcRpcService_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Mint", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// BlcRpcService_ServiceDesc is the grpc_go.ServiceDesc for BlcRpcService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlcRpcService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "api.BlcRpcService",
	HandlerType: (*BlcRpcServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _BlcRpcService_SignUp_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _BlcRpcService_GetUserBalance_Handler,
		},
		{
			MethodName: "GetActivityAmount",
			Handler:    _BlcRpcService_GetActivityAmount_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _BlcRpcService_CreateActivity_Handler,
		},
		{
			MethodName: "GetIdToActivity",
			Handler:    _BlcRpcService_GetIdToActivity_Handler,
		},
		{
			MethodName: "BeforeMint",
			Handler:    _BlcRpcService_BeforeMint_Handler,
		},
		{
			MethodName: "GetDcFromActivity",
			Handler:    _BlcRpcService_GetDcFromActivity_Handler,
		},
		{
			MethodName: "GetUserStatus",
			Handler:    _BlcRpcService_GetUserStatus_Handler,
		},
		{
			MethodName: "CheckDcAndReturnTime",
			Handler:    _BlcRpcService_CheckDcAndReturnTime_Handler,
		},
		{
			MethodName: "GetHashToDcId",
			Handler:    _BlcRpcService_GetHashToDcId_Handler,
		},
		{
			MethodName: "Give",
			Handler:    _BlcRpcService_Give_Handler,
		},
		{
			MethodName: "GetDcHistoryAndMessage",
			Handler:    _BlcRpcService_GetDcHistoryAndMessage_Handler,
		},
		{
			MethodName: "GetPoolAmount",
			Handler:    _BlcRpcService_GetPoolAmount_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _BlcRpcService_CreatePool_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _BlcRpcService_Mint_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "blc.proto",
}
